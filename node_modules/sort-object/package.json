{
  "name": "sort-object",
  "description": "Sort the keys in an object.",
  "version": "0.3.2",
  "homepage": "https://github.com/helpers/sort-object",
  "author": {
    "name": "Brian Woodward",
    "url": "https://github.com/doowb"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/helpers/sort-object.git"
  },
  "bugs": {
    "url": "https://github.com/helpers/sort-object/issues"
  },
  "maintainers": [
    {
      "name": "Jon Schlinkert",
      "url": "https://github.com/helpers"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/helpers/sort-object/blob/master/LICENSE-MIT"
    }
  ],
  "keywords": [
    "arr",
    "array",
    "function",
    "js",
    "key",
    "keys",
    "obj",
    "object",
    "order",
    "re",
    "re-order",
    "sort",
    "util",
    "utils"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "^4.0.4",
    "verb": "^0.2.15"
  },
  "dependencies": {
    "sort-asc": "^0.1.0",
    "sort-desc": "^0.1.1"
  },
  "readme": "# sort-object [![NPM version](https://badge.fury.io/js/sort-object.png)](http://badge.fury.io/js/sort-object)\n\n> Sort the keys in an object.\n\n## Install\n#### Install with [npm](npmjs.org)\n\n```bash\nnpm i sort-object --save\n```\n\n## Usage\n\n```js\nvar sortObj = require('sort-object');\n```\n\nBy default, the keys on an object will be sorted in descending order:\n\n```js\nconsole.log(sortObj({a: 1, c: 2, b: 3}));\n//=> {a: 1, b: 3, c: 2}\n```\n\nThe second param can be an object of `options` OR an array of `keys`:\n\n**object**\n\n```js\nconsole.log(sortObj({a: 1, c: 2, b: 3}, {keys: ['a', 'b']}));\n//=> {a: 1, b: 3}\n```\n\n**array**\n\n```js\nconsole.log(sortObj({a: 1, c: 2, b: 3}, ['a', 'c']));\n//=> {a: 1, c: 2}\n```\n\n## Options\n\n* `keys` {Array} The returned object will contain only the specified keys, in the same order.\n* `sort` {Function} Sort function to sort the keys using JavaScript's `.sort()` method.\n* `sortOrder` {String} Valid values are `desc` or `asc`, case insensitive.\n* `sortBy` {String} Sort function that is passed the entire object, rather than just the keys - as with the `.sort()` method.\n\n### options.keys\n\nCreate a new object with only the given keys.\n\n```js\nvar o = {a: 1, c: 2, e: 5, d: 4, b: 3};\nconsole.log(sortObj(o, {keys: ['a', 'b']}));\n\n//=> {a: 1, b: 3}\n```\n\n### options.sort\n\nFunction to be passed to javascript's `.sort()` method:\n\n```js\nvar o = {a: 1, c: 2, e: 5, d: 4, b: 3};\nvar obj = sortObj(o, {\n  sort: function (a, b) {\n    return a < b ? -1 : 1;\n  }\n});\nconsole.log(obj);\n//=> {a: 1, b: 3, c: 2, d: 4, e: 5}\n```\n\n### options.sortOrder\n\nValid values are `desc` or `asc`, case insensitive:\n\n```js\nvar o = {a: 1, c: 2, e: 5, d: 4, b: 3};\nconsole.log(sortObj(o, {sortOrder: 'ASC'}));\n//=> {e: 5, d: 4, c: 3, b: 2, a: 1}\n```\n\n### options.sortBy\n\nFunction that returns an array of keys to sort by:\n\n```js\nvar old = {one: 'aa', two: 'bc', three: 'ab'};\nvar o = sortObj(old, {\n  sortBy: function (obj) {\n    var arr = [];\n    Object.keys(obj).filter(function(key) {\n      if (/^a/.test(obj[key])) arr.push(key);\n    });\n    return arr.reverse();\n  }\n});\n//=> {three: 'ab', one: 'aa'}\n```\n\n## Author\n\n**Brian Woodward**\n \n+ [github/doowb](https://github.com/doowb)\n+ [twitter/doowb](http://twitter.com/doowb) \n\n## License\nCopyright (c) 2014 Brian Woodward, contributors.  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on October 24, 2014._",
  "readmeFilename": "README.md",
  "_id": "sort-object@0.3.2",
  "_from": "sort-object@"
}
